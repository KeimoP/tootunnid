// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  hourlyWage Float   @default(0)
  role      UserRole @default(WORKER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  timeEntries       TimeEntry[]
  sentRequests      WorkRequest[] @relation("SentRequests")
  receivedRequests  WorkRequest[] @relation("ReceivedRequests")
  workerRelations   WorkerBoss[]  @relation("Worker")
  bossRelations     WorkerBoss[]  @relation("Boss")

  @@map("users")
}

model TimeEntry {
  id       String   @id @default(cuid())
  userId   String
  clockIn  DateTime
  clockOut DateTime?
  duration Int?     // Duration in minutes
  earnings Float?   // Calculated earnings
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

model WorkRequest {
  id          String        @id @default(cuid())
  senderId    String
  receiverId  String
  status      RequestStatus @default(PENDING)
  message     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relationships
  sender   User @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("work_requests")
}

model WorkerBoss {
  id       String   @id @default(cuid())
  workerId String
  bossId   String
  createdAt DateTime @default(now())

  // Relationships
  worker User @relation("Worker", fields: [workerId], references: [id], onDelete: Cascade)
  boss   User @relation("Boss", fields: [bossId], references: [id], onDelete: Cascade)

  @@unique([workerId, bossId])
  @@map("worker_boss")
}

enum UserRole {
  WORKER
  BOSS
  ADMIN
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
